# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreateCustomProjection
                                 A QGIS plugin
 This plugin adds the Coordinate Reference System of a layer to Custom Projection List.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-26
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Murat Çalışkan
        email                : caliskan.murat.20@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Modified by S.Sadkov sergsadkov@gmail.com

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox

from qgis.core import QgsProject, QgsCoordinateReferenceSystem

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .create_custom_projection_dialog import CreateCustomProjectionDialog
from .create_excel_projection_dialog import CreateExcelProjectionDialog
import os.path
import xlrd


class CreateCustomProjection:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreateCustomProjection_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Custom Projection Creator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreateCustomProjection', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/create_custom_projection/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Custom Projection Creator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Custom Projection Creator'),
                action)
            self.iface.removeToolBarIcon(action)

    def getFile(self):
        # self.dlg.le_crsFile.setText("")
        self.path, self._filter = QFileDialog.getOpenFileName(
            self.dlg, "Select file", "",
            'All Files(*.*) ;; prj (*.prj) ;; txt(*.txt)')
        self.dlg.le_crsFile.setText(self.path)
        name = os.path.splitext(os.path.basename(self.path))[0]
        with open(self.path, "r") as f:
            wkt = f.read()
        self.crs_list.updateCRS(Projection(name, wkt))
        self.updateIface()

    def getXls(self):
        self.path, self._filter = QFileDialog.getOpenFileName(
            self.dlg, "Select file", "",
            'All Files(*.*) ;; Excel (*.xls, *.xlsx)')
        self.dlg.le_crsXls.setText(self.path)
        if os.path.exists(self.path):

            self.xls_dlg = CreateExcelProjectionDialog()
            self.rb = xlrd.open_workbook(self.path)
            self.xls_dlg.comboBox_sheet.addItems(self.rb.sheet_names())
            self.updateXls()
            self.xls_dlg.comboBox_sheet.currentTextChanged.connect(self.updateXls)
            self.xls_dlg.show()
            result = self.xls_dlg.exec_()

            if result:
                new_crs_list = readProjXls(
                    self.path,
                    sheet_num=self.xls_dlg.comboBox_sheet.currentIndex(),
                    name_column=self.xls_dlg.comboBox_name.currentText(),
                    wkt_column=self.xls_dlg.comboBox_wkt.currentText()
                )
                if new_crs_list:
                    if not self.crs_list.getCRS():
                        self.crs_list.pop(-1)
                    self.crs_list.extend(new_crs_list)

        self.updateIface()

    def updateXls(self):
        self.sheet_num = self.xls_dlg.comboBox_sheet.currentIndex()
        self.sheet = self.rb.sheet_by_index(self.sheet_num)
        self.xls_dlg.comboBox_name.clear()
        self.xls_dlg.comboBox_wkt.clear()
        self.xls_dlg.comboBox_name.addItems(self.sheet.row_values(0))
        self.xls_dlg.comboBox_wkt.addItems(self.sheet.row_values(0))

    def getCrs(self):
        name = self.dlg.cb_layers.currentText()
        try:
            layer = QgsProject.instance().mapLayersByName(name)[0]
            crs = layer.crs()
            wkt = crs.toWkt()
            self.crs_list.updateCRS(Projection(name, wkt))
            # self.crs = self.layer.crs()
            # self.wkt = self.crs.toWkt()
            # self.dlg.te_crs.setText(self.wkt)
        except IndexError:
            pass
        self.updateIface()

    def swipeLeft(self):
        self.crs_list.moveLeft()
        self.updateIface()

    def swipeRight(self):
        self.crs_list.moveRight()
        self.updateIface()

    def delete(self):
        self.crs_list.deleteCRS()
        self.updateIface()

    def updateIface(self):
        projection = self.crs_list.getCRS()

        self.dlg.le_name.setText(projection.name)
        self.dlg.te_crs.setText(projection.wkt)

        self.dlg.label_2.setText('New Projection %i of %i' %
                    (self.crs_list.current_index + 1, len(self.crs_list)))
        self.dlg.tb_left.setEnabled(self.crs_list.current_index != 0)
        self.dlg.tb_right.setEnabled(
            self.crs_list.current_index <= len(self.crs_list))

        # self.dlg.textBrowser.setText(str(self.crs_list))

    def addCrs(self, crs_index = None):
        # self.wkt = self.dlg.te_crs.toPlainText()
        # self.name = self.dlg.le_name.text()
        # self.new_crs = QgsCoordinateReferenceSystem()
        # self.new_crs.createFromWkt(self.wkt)
        projection = self.crs_list.getCRS(crs_index)
        name = projection.name.strip()
        new_crs = projection.getQgis()
        if name:
            if new_crs.isValid():
                new_crs.saveAsUserCrs(name, )
                return 1
            else:
                self.msgBox = QMessageBox()
                self.msgBox.setIcon(QMessageBox.Information)
                self.msgBox.setText("Invalid CRS - " + projection.wkt)
                self.msgBox.setStandardButtons(QMessageBox.Ok)
                self.returnValue = self.msgBox.exec()
        else:
            self.msgBox = QMessageBox()
            self.msgBox.setIcon(QMessageBox.Information)
            self.msgBox.setText("Invalid name - " + name)
            self.msgBox.setStandardButtons(QMessageBox.Ok)
            self.returnValue = self.msgBox.exec()
        return 0

    def addAllCrs(self):
        new_crs_count = 0
        for i in range(len(self.crs_list)):
            new_crs_count += self.addCrs(i)
        self.msgBox = QMessageBox()
        self.msgBox.setIcon(QMessageBox.Information)
        self.msgBox.setText("%i New CRS added!" % new_crs_count)
        self.msgBox.setStandardButtons(QMessageBox.Ok)
        self.returnValue = self.msgBox.exec()
            
    def clear(self):
        self.dlg.te_crs.setText('')
        self.dlg.le_name.setText('')
        self.dlg.le_crsFile.setText('')
    
    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            # self.first_start = False
            self.dlg = CreateCustomProjectionDialog()
            self.layers = [layer.name() for layer in QgsProject.instance().mapLayers().values()]

            
            self.dlg.cb_layers.addItems(self.layers)
            self.crs_list = ProjectionList()
            self.getCrs()
            
            self.dlg.cb_layers.currentTextChanged.connect(self.getCrs)
            
            self.dlg.btn_close.clicked.connect(lambda x: self.dlg.close())
            self.dlg.btn_add.clicked.connect(self.addCrs)
            self.dlg.btn_add_all.clicked.connect(self.addAllCrs)
            
            self.dlg.tb_browse.clicked.connect(self.getFile)
            self.dlg.tb_xls.clicked.connect(self.getXls)
            
            # self.dlg.tabWidget.currentChanged.connect(self.clear)
            self.dlg.tabWidget.currentChanged.connect(self.updateIface)

            self.dlg.tb_left.clicked.connect(self.swipeLeft)
            self.dlg.tb_right.clicked.connect(self.swipeRight)
            self.dlg.tb_delete.clicked.connect(self.delete)
            

        # show the dialog
        self.dlg.show()
        
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


class Projection(object):

    def __init__(self, name, wkt):
        self.name = name
        self.wkt = wkt

    def __bool__(self):
        return bool(self.name.strip()) or bool(self.wkt.strip())

    def __str__(self):
        return self.name + ' : ' + self.wkt

    def getQgis(self):
        new_crs = QgsCoordinateReferenceSystem()
        new_crs.createFromWkt(self.wkt)
        return new_crs


class ProjectionList(list):

    def __init__(self, projection=Projection('', '')):
        self.append(projection)
        self.current_index = 0
        pass

    def __str__(self):
        pl_str = 'Projection List of ' + str(len(self)) + ', current ' + \
                 str(self.current_index) + ':\n' + \
                 '\n'.join([str(projection) for projection in self])
        return pl_str

    def currentCRS(self):
        return self[self.current_index]

    def getCRS(self, crs_index=None):
        if crs_index is None:
            crs_index = self.current_index
        return self[crs_index]

    def getQgisCRS(self, crs_index=None):
        crs = self.getCRS(crs_index=crs_index)
        return crs.getQgisCRS()

    def updateCRS(self, projection):
        self[self.current_index] = projection

    def moveLeft(self):
        if self.current_index > 0:
            self.current_index -= 1

    def moveRight(self):
        if self.current_index < (len(self) - 1):
            self.current_index += 1
        elif (self.current_index == (len(self) - 1)) and self.currentCRS():
            self.append(Projection('', ''))
            self.current_index += 1
        else:
            pass

    def deleteCRS(self):
        if len(self) == 1:
            self[0] = Projection('', '')
        else:
            self.pop(self.current_index)
            if self.current_index == len(self):
                self.current_index -= 1


def readProjXls(path2xls, sheet_num=0, name_column='name', wkt_column='wkt'):

    proj_list = []

    if os.path.exists(path2xls):

        rb = xlrd.open_workbook(path2xls)
        sheet = rb.sheet_by_index(sheet_num)
        keys = sheet.row_values(0)
        name_index = keys.index(name_column)
        wkt_index = keys.index(wkt_column)

        if (name_index == -1) or (wkt_index == -1):
            raise Exception('name or wkt column not found')

        for rownum in range(1, sheet.nrows):
            row = sheet.row_values(rownum)
            name = row[name_index]
            wkt = row[wkt_index]
            proj_list.append(Projection(name, wkt))

    return proj_list
